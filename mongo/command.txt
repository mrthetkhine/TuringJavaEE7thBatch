mongosh

//show all databases;
show databases;

//switch database
use test;

//cls;

//show all collections
show collections;

db.todos.insertOne({
    "userId": 1,
    "id": 1,
    "title": "delectus aut autem",
    "completed": false
});
db.todos.insertOne( {
    "id": 2,
    "title": "quis ut nam facilis et officia qui",
});

//query all todos 
db.todos.find();

db.todos.insertMany([
    {
    "userId": 1,
    "id": 3,
    "title": "fugiat veniam minus",
    "completed": false
  },
  {
    "userId": 1,
    "id": 4,
    "title": "et porro tempora",
    "completed": true
  }
]);

db.movies.insertOne( {
    "title": "titanic",
    "genre":["Drama"],
    "actors":[
        {
            "firstName":"Leonardo",
            "lastName":"Decaprio",
            "gender":"Male",
        },
         {
            "firstName":"Kate",
            "lastName":"Winselect",
            "gender":"female",
        },
    ]
});


db.inventory.insertMany([
   { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "A" },
   { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
   { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
   { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" }
]);

//find all
db.inventory.find( {} )

//find inventory with status = 'D'
db.inventory.find( {
    'status':'D'
})

//find inventory with status = 'D' AND item=  'paper'
db.inventory.find( {
    'status':'D',
    'item':'paper'
})

//find inventory with status = 'D' OR item=  'journal'
db.inventory.find( {
    $or:[
        {
            'status':'D',
        },
        {
            'item':'journal'
        }
    ]
})

//find inventory with status = 'A' OR  status = 'A'
db.inventory.find( {
    $or:[
        {
            'status':'D',
        },
        {
            'status':'A',
        }
    ]
});

db.inventory.find( {
    "status":{
        $in:["A","D"]
    }
});

db.inventory.find( {
    "qty":{
        $gte:45
    }
});

db.inventory.insertMany( [
   { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "A" },
   { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
   { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
   { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" }
]);

db.inventory.find( { "size.uom": "in" } )

db.inventory.find( { "size.h": { $lt: 15 } } )

//problematic query with order
db.inventory.find( { size: { h: 14, w: 21, uom: "cm" } } )

//no result
db.inventory.find( { size: { w: 21, h: 14, uom: "cm" } } )

//get result
db.inventory.find( { "size.w":21,"size.h":14} )

db.inventory.insertMany([
   { item: "journal", qty: 25, tags: ["blank", "red"], dim_cm: [ 14, 21 ] },
   { item: "notebook", qty: 50, tags: ["red", "blank"], dim_cm: [ 14, 21 ] },
   { item: "paper", qty: 100, tags: ["red", "blank", "plain"], dim_cm: [ 14, 21 ] },
   { item: "planner", qty: 75, tags: ["blank", "red"], dim_cm: [ 22.85, 30 ] },
   { item: "postcard", qty: 45, tags: ["blue"], dim_cm: [ 10, 15.25 ] }
]);

//array exact match
db.inventory.find( { tags: ["red", "blank"] } )

//array containing red and blank
db.inventory.find( { tags: { $all: ["red", "blank"] } } )

//find element
db.inventory.find( { tags: "red" } )

db.inventory.find( { dim_cm: { $gt: 25 } } )

//Problem
db.inventory.find( { dim_cm: { $gt: 15, $lt: 20 } } )

    {
    _id: ObjectId('68a0736ca072ead7192b1aef'),
    item: 'notebook',
    qty: 50,
    tags: [ 'red', 'blank' ],
    dim_cm: [ 14, 21 ]
  },

//element whose value is >22 and lt 30
db.inventory.find( { dim_cm: { $elemMatch: { $gt: 22, $lt: 30 } } } )

db.inventory.find( { "dim_cm.1": { $gt: 25 } } )

//find by length 
db.inventory.find( { "tags": { $size: 3 } } )

//size >=2
db.inventory.find({'tags.1': {$exists: true}})

//embedded documents
db.inventory.insertMany( [
   { item: "journal", instock: [ { warehouse: "A", qty: 5 }, { warehouse: "C", qty: 15 } ] },
   { item: "notebook", instock: [ { warehouse: "C", qty: 5 } ] },
   { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 15 } ] },
   { item: "planner", instock: [ { warehouse: "A", qty: 40 }, { warehouse: "B", qty: 5 } ] },
   { item: "postcard", instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
]);

//exact property, order
db.inventory.find( { "instock": { warehouse: "A", qty: 5 } } )

//problem 
db.inventory.find( { "instock": { qty: 5, warehouse: "A", } } )

db.inventory.find( { 
    "instock.qty":5,
    "instock.warehouse":"A",
});

db.inventory.find( { "instock": { $elemMatch: { qty: 5, warehouse: "A" } } } )

db.inventory.find( { 'instock.0.qty': { $lte: 20 } } )

//Problem
db.inventory.find( { "instock.qty": { $gt: 10,  $lte: 20 } } )

//project

db.inventory.find({},{"item":1})

db.inventory.find({},{"item":0})

db.inventory.find( { status: "A" }, { item: 1, status: 1, _id: 0 } )

aggregation pipeline

db.movies.aggregate([
    {
        $addFields: {
            "movie_actors": {
                $map:{
                    input: "$actors",
                    as: "actor",
                    in:   "$$actor.$id"
                }
                
            }
        }
    },
    {
        $unwind:"$movie_actors"
    },
    { 
        $lookup:
        {
            from: 'actors',
            localField: "movie_actors",
            foreignField: '_id',
            as: 'joined_actors'
        }
    },
    { 
        "$group": {
            "_id": "$_id",
            "joined_actors":{ 
                                "$push":{ $arrayElemAt: [ "$joined_actors",0] }
                            },
            "doc":{"$first":"$$ROOT"}
        }
    },
    {   
        "$replaceRoot":{
            "newRoot":{ $mergeObjects: [ '$doc',{ actors: '$joined_actors' }] },
        }
    },
    { $unset: "joined_actors" },
    { 
        "$match": {
            "actors": {
                $elemMatch:{
                    "firstName":"Leonardo"
                }
            }
        } 
    },
])